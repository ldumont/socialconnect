#summary Requirements and procedure.

== Introduction ==
SocialConnect is available as a Django application. First install it in your project by adding the application in your settings.py:

{{{
INSTALLED_APPS = (
    [...],	
    'socialconnect',
    [...],
)
}}}

Also in the same file add the constant to define which model describes the user profile of your platform:
`AUTH_PROFILE_MODULE = 'apps.model'`

SocialConnect uses some views so add them to your root urls.py:
`(r'^socialconnect/', include('socialconnect.urls'))`

SocialConnect uses database for storage so you need to create the table with a "syncdb" command. The application comes with fixtures for Facebook, MySpace and Partuza support.

To be able to communicate with the API of an external platform, SocialConnect needs an API key and secret. They are usually delivered by the platform, so you have to create a application on the developer webpage of the platform.

So to be able to use SocialConnect with Facebook, MySpace and Partuza, you first have to create an application on each of those platforms to get an API key and secret. Then you have to use the Django admin to add the keys and secrets to these platforms.


== Requirements ==
 * Python 2.5 with [http://www.pythonware.com/products/pil/ PIL]
 * Django revision 9843

SocialConnect also requires several external libraries:
 * Python libs:
   * [http://pypi.python.org/pypi/simple_json/1.1 simple_json] (version 1.1) `easy_install simple_json` 
   * [http://microapps.sourceforge.net/restclient/ restclient] (version 0.9.9) `easy_install restclient`

 * Django libs:
   * [http://pyfacebook.googlecode.com pyFacebook] (revision 173) `svn checkout http://pyfacebook.googlecode.com/svn/trunk/facebook facebook` 
   * [http://opensocial-python-rest-library.googlecode.com opensocial-python-rest-library] (last revision) `svn checkout http://opensocial-python-rest-library.googlecode.com/svn/trunk/ opensocial`         
   * [http://oauth.googlecode.com/ oauth] (revision 868) `svn checkout http://oauth.googlecode.com/svn/code/python/oauth oauth`

Install them as usual and be sure that they are available within your Django project.

== SocialConnect views ==
Despite the fact that SocialConnect doesn't display anything to users directly, it has some views that need to be accessible. Those views are the callback view after a redirection to a remote platform. So in the urls.py file of your project, you have to add access to the SocialConnect view:

{{{
urlpatterns = patterns('',
   	url(r'^admin/(.*)', admin.site.root),
	(r'^socialconnect/', include('socialconnect.urls')),
	(r'^', include('yasn.urls')),	
}}}

== API Calls ==
The last step before making a call is to add the SocialConnect models and the decorator:
{{{
from socialconnect.models import SocialContext, PlatformAccount, Platform
from socialconnect.utils.decorators import exception_handler
}}}

== YASN Installation ==
If you plan to install YASN to test it and play with the code, they are some adjustments required. First of all, the computer running YASN should be directly reachable from the Internet. This is mandatory because the authorization processes will redirect the users to remote platforms and these platforms need URL to redirect the users back to YASN. So on a web server there should be no problem, but on your home computer you will probably need to configure your router.

Then as mentioned above, you 'll have to create an application on Facebook, MySpace and an account on Partuza to get the necessary API keys and secrets.

YASN needs some specific definition in the settings of the project:

 * Add YASN to your installed apps.
 * Add `django.core.context_processors.media` to Â´TEMPLATE_CONTEXT_PROCESSOR`.
 * Set `LOGIN_URL = '/login/'`. 
 * YASN send emails for password recovery, so don't forget to setup a SMTP server for Django (example below):
   * EMAIL_HOST = 'localhost'
   * EMAIL_PORT = 25

 * Configure your `urls.py` according to your project. 