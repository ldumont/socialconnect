#summary Requirements and how-to.
#labels Featured

== Introduction ==
SocialConnect is available as a Django application with its own models and views. It requires some external libraries and very few settings. 

The only specificity of SocialConnect is the creation of an application on each remote platforms to get the keys to call the APIs.


== Requirements ==
 * Python 2.5 with [http://www.pythonware.com/products/pil/ PIL]
 * Django revision 9843

SocialConnect also requires several external libraries:
 * Python libs:
   * [http://pypi.python.org/pypi/simple_json/1.1 simple_json] (version 1.1) `easy_install simple_json` 
   * [http://microapps.sourceforge.net/restclient/ restclient] (version 0.9.9) `easy_install restclient`

 * Django libs:
   * [http://pyfacebook.googlecode.com pyFacebook] (revision 173) `svn checkout http://pyfacebook.googlecode.com/svn/trunk/facebook facebook` 
   * [http://opensocial-python-rest-library.googlecode.com opensocial-python-rest-library] (last revision) `svn checkout http://opensocial-python-rest-library.googlecode.com/svn/trunk/ opensocial`         
   * [http://oauth.googlecode.com/ oauth] (revision 868) `svn checkout http://oauth.googlecode.com/svn/code/python/oauth oauth`

Install or checkout them as usual and be sure that they are available within your Django project.

== Installation ==
 * Install SocialConnect in your project's settings.py file:

{{{ 
INSTALLED_APPS = (
    [...],	
    'socialconnect',
    [...],
)
}}}

 * In the same file, add a constant to define which model describes the user profile of your platform:
   * `AUTH_PROFILE_MODULE = 'apps.model'`

 * Create the SocialConnect database tables by running `manage.py syncdb`.

 * Be sure to correctly configure the Django `Sites` application.


==== SocialConnect views ====
Despite the fact that SocialConnect doesn't display anything to users directly, it has some views that need to be accessible. Those views are the callback views after a redirection to a remote platform. So in the urls.py file of your project, you have to add access to the SocialConnect view:

{{{
urlpatterns = patterns('',
   	[...],
	(r'^socialconnect/', include('socialconnect.urls')),
        [...],
}}}

==== Platform information ====
To be able to query a platform API, you need information such as API URLs and API key/secret. The API key and secret are usually delivered by the platform, so you have to create an application on the developer webpage of each platform you want to support. For the rest you should find information in the developer documentation of the platform. 

A page that gather this information for the platform tested with YASN is available [PlatformFixtures here].

Locally, these information are stored in the database and can be set through the Django admin.


==== API Calls ====
The last step before making a call is to import the SocialConnect models and the decorator in your views.py:
{{{
from socialconnect.models import SocialContext, PlatformAccount, Platform
from socialconnect.utils.decorators import exception_handler
}}}

==== SocialConnectException ====
In some cases, SocialConnect requires that the user sign out of the remote platform. This could happen if two users uses the same computer to synchronize their accounts. In this case, SocialConnect will raise a `SocialConnectException`. This exception is caught by the `exception_handler` decorator that by default returns a `HttpResponse` with an error description. So in `socialconnect/utils/decorators.py`, you have to edit what to do when such a `SocialConnectException` is caught.


== YASN Installation ==
If you plan to install YASN to test it and play with the code, they are some adjustments required. First of all, the computer running YASN should be directly reachable from the Internet. This is mandatory because the authorization processes will redirect the users to remote platforms and these platforms need URL to redirect the users back to YASN. So on a web server there should be no problem, but on your home computer you will probably need to configure your router.

Then as mentioned above, you will have to create an application on Facebook, MySpace and an account on Partuza to get the necessary API keys and secrets.

YASN needs some specific definition in the settings.py of the project:

 * Add YASN to your installed apps.
 * Configure your `urls.py` according to your project. 
 * Add `django.core.context_processors.media` to Â´TEMPLATE_CONTEXT_PROCESSOR`.
 * Set `LOGIN_URL = '/login/'`. 
 * YASN send emails for password recovery, so don't forget to setup a SMTP server for Django (example below):
   * EMAIL_HOST = 'localhost'
   * EMAIL_PORT = 25

==== Facebook templates ====

To be able to test the notification of activities to Facebook, you have to create the three necessary templates with the [http://developers.facebook.com/tools.php?feed Facebook tool]. The ids provided by Facebook for the templates also need to be set in the settings.py file:

 * TEMPLATE_STORY_ID = 123456789 # A user writes a story on YASN
 * TEMPLATE_COMMENT_AUTHOR_ID = 123456789 # A user comments on his own story
 * TEMPLATE_COMMENT_TARGET_ID = 123456789 # A user comments on another user story