#summary Improve SocialConnect

== Introduction ==

SocialConnect is highly modular to allow addition of new functionalities. Support for new calls to the Facebook or OpenSocial APIs can added simply by writing two methods in the model layer and two in the proxy layer (one for Facebook and one for OpenSocial). In addition the library that execute the call needs to be changed as well. 

For Facebook, the library ([http://pyfacebook.googlecode.com pyFacebook]) is up-to-date with the Facebook API and is normally updated when new calls are available.

For OpenSocial, the library ([http://opensocial-python-rest-library.googlecode.com opensocial-python-rest-library]) might not be updated. Go to the project page and propose new features or patches if needed.

=== New calls ===

The methods in the model layer are responsible to first check if the remote platform supports the call and then check if the call is authorized. The model layer then instantiate the correct proxy layer that will send the call to the API.

This schema is the same for each functionality, with minor differences.

*Model layer:*
{{{
def send_notifications(self, request, callback, user_ids, text, *args):
	'''
	Send a notification to a list of users on the remote platform
			
	Params:
		request: the django http request
		callback: the view to callback if an RedirectException occurs
		users_ids: target for the notification
		text: text of the notification
		args: any args for the callback view
				
	'''
		
	# check if the platform supports the call		
	if not self.current_platform.support_notifications:
		raise NotSupportedException()

	# validate of the context, then call
	if self._validate_context(request, callback, args):
		return self._send_notifications(user_ids, text)		


def _send_notifications(self, user_ids, text):
	'''
	Private method that instanciate the correct Proxy and call the api
	'''
	
	if self.current_platform.__class__ == FBPlatform:
		proxy = FBRequestProxy(self.com_object)	
	else:
		proxy = OSRequestProxy(self.com_object)	
	return proxy.send_notifications(user_ids, text)

}}}

*Proxy layer:*
{{{
def send_notifications(self, uids, text, type='user_to_user'):
	'''
	This function send a notification to the ids provided
			
	Params:
		uids: target users
		text: text of the notification
		type: type is 'user_to_user' by default but 'app_to_user' is also possible
		
	'''
	return self.com_object.notifications.send(uids, text, type=type)
	
}}}

=== Activities ===
The main next improvement would be the support of activities for OpenSocial. Actually, activities can be notified only on Facebook. The OpenSocial 0.8 specifications for the REST API.

=== Profiles ===
The actual matching of profile is very simple. A comparison between the ids of the user on the remote platform is done. This could be improved by  editing the matching function with a more complex matching.

{{{
		
# Those are the matching function for friends. By default they only check the remote_id but they
# can be improved to enable more specific matching. The only restriction is that they have to
# return PlatformAccounts querysets.		
def _get_matched_fb():
return PlatformFBAccount.objects.filter(remote_id__in=proxy.get_friends(fields.values(), get_profiles=False), platform=self.current_platform)
			
def _get_matched_os():
return PlatformOSAccount.objects.filter(remote_id__in=proxy.get_friends(fields.values(), get_profiles=False), platform=self.current_platform)
		
}}}

The list of fields available from the APIs is huge. Actually only a subset of them is handled by SocialConnect, so more support might be added. 

=== XRDS-Simple ===
At this time, adding a platform in the system is made through the django admin. This process requires to provide a lot of information about the platform, such as URLs. Using XRDS-Simple, the process might be more simple and automatically updated to change in the platform URLs.

=== Request batching ===
Facebook provide an API to batch requests in one single call. For efficiency, SocialConnect might take advantage of this API. 

=== OpenSocial library ===
The OpenSocial library used with SocialConnect was developed only for SocialConnect and is maybe not the best library available. A interesting project recently became available [http://code.google.com/p/opensocial-python-client/ opensocial-python-client]. SocialConnect might be modified to use it.