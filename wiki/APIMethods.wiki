#summary Methods Footprint to query the API
== Introduction ==
This section describes the available methods of the `SocialContext` object.


=== Utilities ===
Those methods are available to execute tasks related to `Platform` and `PlatformAccount`.

*_def get_or_create_social_context(request, platform_id=None)_*

This static method tries to get a Social Context from the user session. If none is found, it creates a new one with the platform_id.

The platform_id is optional and should be omitted only when there is no doubt that a `SocialContext` instance is in the user session. Otherwise, an `RuntimeError` is raised.


*_def get_platforms(request, task)_*

This static method returns the list of platforms that support a specific task. The tasks supported by a platform are set in the Django admin.
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _task_: the concerned task. Can be 'people', 'groups', 'activities_push', 'activities_pull' or 'notifications'.

 * Return:
   * a mixed list of `FBPlatform` and `OSPlatform`.


*_def remove_subscription(request, platform_id)_*

This static method can be used to remove the link between a local user and his remote account on a remote platform. Concretely it delete the concerned `PlatformAccount` tuple in the database. This method also destroy the current Social Context if it's related to this platform.
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _platform_: the concerned platform.
 * Return:
   * -



=== API Calls ===
Those methods are the API calls. Because any API call can lead to a redirection to the remote platform, it's necessary to tell the SocialContext where the user needs to be redirected after the remote platform. Thus all the methods have a `callback` and `*args` parameter. `callback` is the name of the callback view and `*args` contains the parameters for this view.

*_def synch_account(self, request, callback, `*`args)_*

This method simply synchronizes a user local account with a remote account on a remote platform. It just call the `_validation_context()` method to obtains a session with the remote platform.
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _callback_: the name of the callback view.
   * `*`_args_: the parameters of the callback view.

 * Return:
   * `True` if the account has been successfully synchronized. 

*_def get_profile(self, request, callback, `*`args)_*

This method returns a `Profile` object created with the data of the user's profile from the remote platform.
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _callback_: the name of the callback view.
   * `*`_args_: the parameters of the callback view.

 * Return:
   * A `Profile` build from the data received from the remote platform.

*_def get_friends(self, request, callback, matched, `*`args)_*

This method returns a list of friends. If `matched` equals `False`, the list contains `Profile` objects built from the remote data. If not, a matching on user ids is made to retrieve only the friends that are on the local platform. In this case, a list of `PlatformAccount` is returned.
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _callback_: the name of the callback view.
   * _matched_: if `True` a matching is processed to retrieve a list of `PlatformAccounts`, if `False` a list of `Profiles`.
   * `*`_args_: the parameters of the callback view.

 * Return:
   * A list of `Profiles` build from the data received from the remote platform.


*_def get_groups(self, request, callback, `*`args)_*

This method returns the list of the user's groups on the remote platform. 
 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _callback_: the name of the callback view.
   * `*`_args_: the parameters of the callback view.

 * Return:
   * A list of groups. Each group is represented as a dictionary. Keys: name, description, picture.

*_def publish_user_action(self, request, callback, template_id, template_data, target_ids=None, `*`args)_*

This method publishes an activity in the user Facebook wall. `template_id` must be the id of a template registered on Facebook and `template_data` the data to fill the template. `target_ids` can be a list of Facebook user ids if the template uses the {`*`target`*`) tag.

 * Parameters:
   * _request_: the Django `HttpRequest` object.
   * _callback_: the name of the callback view.
   * _template_id_: the name of the callback view.
   * _template_data_: the name of the callback view.
   * _target_ids_: the name of the callback view.
   * `*`_args_: the parameters of the callback view.

 * Return:
   * `0` if the action was not published because the feed limit was exceeded. `1` if the story was successfully published. In every other case an exception is raised. 

*_def send_notifications(self, request, callback, user_ids, text, `*`args)_*

This method sends a notification to a list of users on Facebook. `user_ids` contains the Facebook user ids and `text` the text to send. Links can be added in the notification using the HTML `a` tag.