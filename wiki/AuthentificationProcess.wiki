#summary The authentification with Facebook and OAuth.

= Introduction =

Any call to Facebook or OpenSocial REST API require an authentification. SocialContext does not follow the password anti-pattern but the custom Facebook login process and OAuth.


For Facebook, the user is redirected to http://www.facebook.com/login.php where it must sign in and accept the Facebook application of the platform before coming back to the platform.

For OpenSocial, the authentification is made through [http://oauth.net/ OAuth] as the OpenSocial specifications required. The workflow is roughly the same as with Facebook, the user is redirected to the OpenSocial container where he sign in and accept the OAuth token.

If the context is freshly created, it doesn't have a communication object yet. So the communication object validation will fail. The validation will first try to create a new object using the session information from a previous request stored in the database. If no information is available, the Social Context will raise a `RedirectException`. The `exception_handler` decorator will catch it and redirect the user to the remote platform to get the necessary information to build a new communication object.

[http://socialconnect.googlecode.com/files/comObject-validation.png]

To be valid, the communication object needs to have an authorized session to the remote platform. For Facebook, the object has a token that it used to get a session key that is send with the request. For OpenSocial, the object has an access token that might directly be used to query the platform. In both cases, the session has a limited validity in time. So the Social Context need to check if the session is still valid and possibly request a new session from the platform. This is addressed by a redirection of the user to the remote platform to obtain a fresh token. Then the user is redirected back to a SocialConnect views that will store the authentification information from the remote platform and possibly create an ´Account´ for the user. The view does not display anything but finally redirect the user to the original view where the call can be done again.